#!/bin/bash
exec scala -cp qry.jar:test/src/test_client.jar:src/naturalli_client.jar "$0" "$@"
!#
import Qry._

//
// Remove potentially stale caches
//
submit("rm" ->"etc/snli/snli_1.0rc1_train.tab.SIMPLE.cache")
submit("rm" ->"etc/snli/snli_1.0rc1_dev.tab.SIMPLE.cache")
submit("rm" ->"etc/snli/snli_1.0rc1_test.tab.SIMPLE.cache")

//
// Define the program
//
val program:List[String] = ("java"
  -('cp, cp)
//	-"Xrunhprof:cpu=samples,depth=25"
	-"Xmx7G"
	-"Xss32m"
  -"XX:MaxPermSize=256M"
  -"Dwordnet.database.dir=etc/WordNet-3.1/dict"
	-'server
  -'ea
	->"edu.stanford.nlp.naturalli.entail.ClassifierTrainer"
).toList

using("runs/")

//
// Run the full train/test set
//
submit(program
  -("train.file", "etc/snli/snli_1.0rc1_train.tab")
  -("train.cache.do", "true")
  -("test.file", "etc/snli/snli_1.0rc1_dev.tab")
  -("test.cache.do", "true")

  -("model", touch("model.ser.gz"))
  -("features", """[ BLEU  LENGTH_DIFF  OVERLAP  POS_OVERLAP  ENTAIL_UNIGRAM  ENTAIL_BIGRAM  CONCLUSION_NGRAM ]""")
  -("features.nolex", "false")
  
  -("log.file", touch("redwood.log"))
)

//
// Run the ablation studies
//
submit(program
  -("train.file", "etc/snli/snli_1.0rc1_train.tab")
  -("train.cache.do", "true")
  -("test.file", "etc/snli/snli_1.0rc1_dev.tab")
  -("test.cache.do", "true")

  -("train.count", "100" & "1000" & "10000" & "50000" & "100000" & "250000")
  -("model", touch("model.ser.gz"))
  -("features", """[ BLEU  LENGTH_DIFF  OVERLAP  POS_OVERLAP  ENTAIL_UNIGRAM  ENTAIL_BIGRAM  CONCLUSION_NGRAM ]""")
  -("features.nolex", "false")
  
  -("log.file", touch("redwood.log"))
)


def cp:String = {
  val JAVANLP = List(
    System.getenv("JAVANLP_HOME") + "/projects/core/classes",
    System.getenv("JAVANLP_HOME") + "/projects/core/lib/joda-time.jar",
    System.getenv("JAVANLP_HOME") + "/projects/core/lib/jollyday-0.4.7.jar",
    System.getenv("JAVANLP_HOME") + "/projects/core/lib/protobuf.jar",
    System.getenv("JAVANLP_HOME") + "/projects/more/classes",
    System.getenv("JAVANLP_HOME") + "/projects/more/lib/BerkeleyParser.jar",
    System.getenv("JAVANLP_HOME") + "/projects/research/classes",
    System.getenv("JAVANLP_HOME") + "/projects/research/lib/reverb.jar",
    System.getenv("JAVANLP_HOME") + "/projects/research/lib/postgresql.jar",
    "/u/nlp/data/StanfordCoreNLPModels/stanford-corenlp-models-current.jar",
    "/u/nlp/data/StanfordCoreNLPModels/stanford-corenlp-caseless-models-current.jar"
  ).mkString(":")
  val SCALA = List(
      System.getenv("SCALA_HOME") + "/lib/scala-library.jar",
      System.getenv("SCALA_HOME") + "/lib/config-1.2.0.jar",
      System.getenv("SCALA_HOME") + "/lib/scala-xml_2.11-1.0.1.jar"
    ).mkString(":")
  val CUSTOM = List(
      "lib/corenlp-scala.jar",
      "lib/trove.jar",
      "lib/jaws.jar",
      "lib/scripts/sim-1.0.jar",
      "lib/protobuf.jar"
    ).mkString(":")
  List("src/naturalli_preprocess.jar", JAVANLP, SCALA, CUSTOM).mkString(":")
}
