#!/bin/bash
exec scala -J-Xmx512m "$0" "$@"
!#

import java.io.File

// Parse arguments
if (args.length < 2) {
  System.err.println("Usage: auc <pr_file> <threshold>")
  System.exit(1)
}
if (!new File(args(0)).exists) {
  System.err.println(s"Could not find PR file at ${args(0)}")
  System.exit(1)
}
if (args(1).toDouble < 0.0 || args(1).toDouble > 1.0) {
  System.err.println(s"Invalid threshold (must be between 0 and 1): ${args(1)}")
  System.exit(1)
}
val threshold:Double = args(1).toDouble

// Parse file
val probAndGold = (for (line <- io.Source.fromFile(args(0)).getLines.drop(1)) yield {
  val gold = line.split("\t")(0).toBoolean
  val guess = line.split("\t")(1).toBoolean
  val prob = line.split("\t")(2).toDouble
  (prob, gold)
}).toArray

// Compute Accuracy
val guessAndGold = probAndGold.map{ case (p, g) => (p > threshold, g) }.toArray
System.err.println(s"Always False baseline: ${guessAndGold.map(!_._2).count(x => x).toDouble / guessAndGold.size.toDouble}")
System.err.println(s"Always True baseline: ${guessAndGold.map(_._2).count(x => x).toDouble / guessAndGold.size.toDouble}")
System.err.println(s"Accuracy: ${guessAndGold.count{ case (x, y) => x == y }.toDouble / guessAndGold.size.toDouble}")


// Compute PR
val denom = guessAndGold.count{ case (x, y) => x || y }.toDouble
var sumCorrect = 0
var sumTotal   = 0
val pr = probAndGold.toArray.groupBy( _._1 ).toArray.sortBy( -_._1 ).map( x => (x._1, x._2.map( _._2)) ).map {
    case (prob:Double, golds:Array[Boolean]) =>
  val guess:Boolean = prob > threshold
  sumTotal += (if (guess) golds.size else golds.count( x => x ))
  sumCorrect += golds.count( _ == guess )
  (sumCorrect.toDouble / sumTotal.toDouble,
   sumTotal.toDouble / denom)
}
val cutoff = (1 until pr.length).find{ (i:Int) =>
  math.abs(pr(i-1)._2 - pr(i)._2) > 0.25
}.getOrElse(pr.length)

println("""
set xlabel "Recall"
set ylabel "Precision"
set xrange [0:1]
set yrange [0.65:1]
set border 19
set xtics nomirror
set ytics nomirror

set terminal pdf enhanced solid color font "etc/sfrm1000.pfb"
set output "pr.pdf"

set style line 1 lw 5

plot \
    "-" title "system" with lines ls 1
""" +
pr.take(cutoff).map{ case (p, r) => s"$r\t$p" }.mkString("\n") +
"""
end
""")

