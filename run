#!/bin/bash
exec scala -cp qry.jar:test/src/test_client.jar:src/naturalli_client.jar "$0" "$@"
!#
import Qry._

val c = guessClassOrElse("org.goobs.naturalli.Client")
val conf = guessConfOrElse("src/org/goobs/naturalli/conf/base.conf")

println("running " + c)
val program:List[String] = ("java"
  -('cp, cp)
//	-"Xrunhprof:cpu=samples,depth=25"
	-"Xmx8G"
	-"Xss32m"
  -"XX:MaxPermSize=256M"
  -"Dwordnet.database.dir=etc/WordNet-3.1/dict"
	-'server
  -'ea
	->c
).toList

println("using(" + conf + ")")
using(conf)

submit(program
)


def cp:String = {
  val JAVANLP = List(
    System.getenv("JAVANLP_HOME") + "/projects/core/classes",
    System.getenv("JAVANLP_HOME") + "/projects/core/lib/joda-time.jar",
    System.getenv("JAVANLP_HOME") + "/projects/core/lib/jollyday-0.4.7.jar",
    System.getenv("JAVANLP_HOME") + "/projects/more/classes",
    System.getenv("JAVANLP_HOME") + "/projects/more/lib/BerkeleyParser.jar",
    System.getenv("JAVANLP_HOME") + "/projects/research/classes",
    System.getenv("JAVANLP_HOME") + "/projects/research/lib/reverb.jar",
    System.getenv("JAVANLP_HOME") + "/projects/research/lib/postgresql.jar",
    "/u/nlp/data/StanfordCoreNLPModels/stanford-corenlp-models-current.jar",
    "/u/nlp/data/StanfordCoreNLPModels/stanford-corenlp-caseless-models-current.jar"
  ).mkString(":")
  val SCALA = List(
      System.getenv("SCALA_HOME") + "/lib/scala-library.jar",
      System.getenv("SCALA_HOME") + "/lib/config-1.2.0.jar",
      System.getenv("SCALA_HOME") + "/lib/scala-xml_2.11-1.0.1.jar"
    ).mkString(":")
  val CUSTOM = List(
      "lib/corenlp-scala.jar",
      "lib/trove.jar",
      "lib/jaws.jar",
      "lib/scripts/sim-1.0.jar",
      "lib/protobuf.jar"
    ).mkString(":")
  List("src/naturalli_client.jar", "test/src/test_client.jar", JAVANLP, SCALA, CUSTOM).mkString(":")
}

def guessClassOrElse(default:String):String = {
  def tryLoad(clazz:String):Option[String] = {
    try {
      Class.forName(clazz); Some(clazz)
    } catch {
      case (e:ClassNotFoundException) => None
    }
  }
  (args.foldLeft( None.asInstanceOf[Option[String]] ){ case (soFar:Option[String], arg:String) =>
    soFar.orElse(tryLoad(arg))
      .orElse(tryLoad("org" + arg))
      .orElse(tryLoad("org.goobs." + arg))
      .orElse(tryLoad("org.goobs.naturalli." + arg))
      .orElse(tryLoad("org.goobs.naturalli.scripts." + arg))
  }).getOrElse(default)
}

def guessConfOrElse(default:String):String = {
  def tryLoad(path:String):Option[String] = {
    try {
      val candidate = new java.io.File(path)
      if (candidate.exists) Some(path) else None
    } catch {
      case (e:java.io.IOException) => None
    }
  }
  (args.foldLeft( None.asInstanceOf[Option[String]] ){ case (soFar:Option[String], arg:String) =>
    soFar.orElse(tryLoad(arg))
      .orElse(tryLoad("conf/" + arg))
      .orElse(tryLoad("naturalli/conf/" + arg))
      .orElse(tryLoad("goobs/naturalli/conf/" + arg))
      .orElse(tryLoad("org/goobs/naturalli/conf/" + arg))
      .orElse(tryLoad("src/org/goobs/naturalli/conf/" + arg))
      .orElse(tryLoad("naturalli/conf/" + arg))
      .orElse(tryLoad("goobs/naturalli/conf/" + arg))
      .orElse(tryLoad("org/goobs/naturalli/conf/" + arg))
      .orElse(tryLoad("src/org/goobs/naturalli/conf/" + arg))
  }).getOrElse(default)
}
